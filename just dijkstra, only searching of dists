#include<iostream>
#include<vector>
#include<algorithm>
#include<set>

using namespace std;

typedef long long lli;

struct edge {
	int y;
	lli w;
};

int n, m ;
vector<vector<edge>> e;
vector<int> d;

const long long INF = 1000000000 + 7;

void dick_stra(int s, int n) {
	d.resize(n, INF);
	d[s] = 0;
	set<pair<lli, int>> l;
	l.insert({ d[s], s });

	while(!l.empty()) {
		int a = l.begin()->second;
		l.erase(l.begin());

		for (auto& i : e[a]) {
			if (d[i.y] > d[a] + i.w) {
				l.erase({ d[i.y], i.y });
				d[i.y] = d[a] + i.w;
				l.insert({ d[i.y], i.y });
			}
		}

	}
}

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> n >> m;
	e = vector<vector<edge>>(n + 1);

	for (int i = 0; i < m; i++) {
		lli a, b, w;
		edge t1, t2;
		cin >> a >> b >> w;
		
		t1.y = a, t1.w = w;
		t2.y = b, t2.w = w;

		e[b].push_back(t1);
		e[a].push_back(t2);
	}

	int s = 0;
	cin >> s;

	dick_stra(s, n);

	for (auto i : d) cout << i << ' ';
	
}
